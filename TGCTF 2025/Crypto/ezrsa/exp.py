# -*-coding:utf-8-*-
"""
author: MIAO25
date: 2025/4/15
about: exp

"""
# from Crypto.Util.number import *
# from tqdm import tqdm
#
# p0 = "😘😾😂😋😶😾😳😷"
# n = 156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579
# c = 47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401
# base_emoji = bytes_to_long(p0[0].encode())
# p0 = bytes_to_long(p0.encode())
# PR.<x> = Zmod(n)[]
# for i in tqdm(range(-3307, 3307)):
#     pp = (base_emoji+i)*2**256+p0
#     f = 2**288*x+pp
#     res = f.monic().small_roots(2**224, 0.4)
#     if res:
#         px = int(res[0])
#         break
# from gmpy2 import *
# # px = 24983429965532426455110187127560229529270562443137951827166860773923
# p = px * 2**288 + (base_emoji+i)*2**256 + p0
# q = n // p
# e = bytes_to_long("💯".encode())
# d0 = inverse(e//15, (p-1)*(q-1))
# m0 = pow(c, d0, n)
#
#
# PR.<x> = Zmod(p)[]
# f = x**15 - m0
# res = f.roots()
# m1 = [r[0] for r in res]
#
# PR.<x> = Zmod(q)[]
# f = x**15 - m0
# res = f.roots()
# m2 = [r[0] for r in res]
# for a in m1:
#     for b in m2:
#         try:
#             m = long_to_bytes(int(crt([int(a),int(b)], [int(p), int(q)])))
#             if b"TGCTF" in m:
#                 print(m.decode())
#         except: pass
#
# # 50%|███████████████████████████████████████▎                                       | 3289/6614 [00:54<00:54, 60.46it/s]
# # TGCTF{🙇🏮🤟_🫡🫡🫡_🚩🚩🚩}😃😖😘😨😢